---
export interface Props {
  placeholder?: string;
  className?: string;
}

const { 
  placeholder = "搜索文章、笔记...", 
  className = "" 
} = Astro.props;
---

<div class={`search-container ${className}`}>
  <div class="relative">
    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
      <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
      </svg>
    </div>
    <input
      type="search"
      id="search-input"
      class="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-lg leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-1 focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
      placeholder={placeholder}
      autocomplete="off"
    />
  </div>
  
  <!-- Search Results -->
  <div id="search-results" class="search-results hidden absolute z-50 w-full mt-2 bg-white rounded-lg shadow-lg border border-gray-200 max-h-96 overflow-y-auto">
    <div id="search-loading" class="hidden p-4 text-center text-gray-500">
      <svg class="animate-spin h-5 w-5 mx-auto mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
      </svg>
      搜索中...
    </div>
    <div id="search-content" class="divide-y divide-gray-200"></div>
    <div id="search-empty" class="hidden p-4 text-center text-gray-500">
      <svg class="h-8 w-8 mx-auto mb-2 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
      </svg>
      未找到相关内容
    </div>
  </div>
</div>

<style>
  .search-container {
    position: relative;
  }
  
  .search-results {
    z-index: 1000;
  }
  
  .search-result-item {
    @apply p-4 hover:bg-gray-50 cursor-pointer transition-colors;
  }
  
  .search-result-title {
    @apply font-semibold text-gray-900 mb-1;
  }
  
  .search-result-excerpt {
    @apply text-sm text-gray-600 line-clamp-2;
  }
  
  .search-result-meta {
    @apply text-xs text-gray-500 mt-2 flex items-center space-x-2;
  }
  
  .search-highlight {
    @apply bg-yellow-200 font-medium;
  }
</style>

<script>
  let pagefind: any = null;
  let searchTimeout: number | null = null;
  
  async function initializeSearch() {
    try {
      // 检查是否在浏览器环境且 Pagefind 已构建
      if (typeof window === 'undefined') return;
      
      // 等待页面加载完成
      await new Promise(resolve => {
        if (document.readyState === 'complete') {
          resolve(undefined);
        } else {
          window.addEventListener('load', () => resolve(undefined));
        }
      });
      
      // 检查 Pagefind 是否可用
      const pagefindScript = document.querySelector('script[src*="pagefind"]');
      if (!pagefindScript) {
        console.warn('Pagefind script not found - search functionality will be limited');
        return;
      }
      
      // 动态加载 Pagefind
      const pagefindModule = await import('/pagefind/pagefind.js');
      pagefind = pagefindModule;
      console.log('Pagefind initialized successfully');
    } catch (error) {
      console.warn('Pagefind not available - falling back to basic search:', error);
      // 如果 Pagefind 不可用，我们仍然可以提供基本的客户端搜索
      initializeFallbackSearch();
    }
  }
  
  async function performSearch(query: string) {
    if (!pagefind || !query.trim()) {
      hideSearchResults();
      return;
    }
    
    showLoading();
    
    try {
      const search = await pagefind.search(query);
      
      if (search.results.length === 0) {
        showEmptyState();
        return;
      }
      
      const results = await Promise.all(
        search.results.slice(0, 8).map(async (result: any) => {
          const data = await result.data();
          return {
            url: data.url,
            title: data.meta.title || 'Untitled',
            excerpt: data.excerpt || '',
            meta: {
              date: data.meta.date || '',
              tags: data.meta.tags || [],
              type: data.url.includes('/blog/') ? 'blog' : 
                    data.url.includes('/notebooks/') ? 'notebook' : 'page'
            }
          };
        })
      );
      
      displayResults(results);
    } catch (error) {
      console.error('Search error:', error);
      showEmptyState();
    }
  }
  
  function showLoading() {
    const resultsDiv = document.getElementById('search-results');
    const loadingDiv = document.getElementById('search-loading');
    const contentDiv = document.getElementById('search-content');
    const emptyDiv = document.getElementById('search-empty');
    
    if (resultsDiv && loadingDiv && contentDiv && emptyDiv) {
      resultsDiv.classList.remove('hidden');
      loadingDiv.classList.remove('hidden');
      contentDiv.innerHTML = '';
      emptyDiv.classList.add('hidden');
    }
  }
  
  function showEmptyState() {
    const loadingDiv = document.getElementById('search-loading');
    const emptyDiv = document.getElementById('search-empty');
    
    if (loadingDiv && emptyDiv) {
      loadingDiv.classList.add('hidden');
      emptyDiv.classList.remove('hidden');
    }
  }
  
  function hideSearchResults() {
    const resultsDiv = document.getElementById('search-results');
    if (resultsDiv) {
      resultsDiv.classList.add('hidden');
    }
  }
  
  function displayResults(results: any[]) {
    const loadingDiv = document.getElementById('search-loading');
    const contentDiv = document.getElementById('search-content');
    const emptyDiv = document.getElementById('search-empty');
    
    if (loadingDiv && contentDiv && emptyDiv) {
      loadingDiv.classList.add('hidden');
      emptyDiv.classList.add('hidden');
      
      contentDiv.innerHTML = results.map(result => `
        <div class="search-result-item" onclick="window.location.href='${result.url}'">
          <div class="flex items-start justify-between">
            <div class="flex-1 min-w-0">
              <h3 class="search-result-title">${result.title}</h3>
              <p class="search-result-excerpt">${result.excerpt}</p>
              <div class="search-result-meta">
                <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium ${
                  result.meta.type === 'blog' ? 'bg-blue-100 text-blue-800' :
                  result.meta.type === 'notebook' ? 'bg-orange-100 text-orange-800' :
                  'bg-gray-100 text-gray-800'
                }">
                  ${result.meta.type === 'blog' ? '📝 博客' : 
                    result.meta.type === 'notebook' ? '📓 Notebook' : '📄 页面'}
                </span>
                ${result.meta.date ? `<span>${new Date(result.meta.date).toLocaleDateString('zh-CN')}</span>` : ''}
              </div>
            </div>
            <svg class="h-4 w-4 text-gray-400 ml-2 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
            </svg>
          </div>
        </div>
      `).join('');
    }
  }
  
  // 初始化搜索功能
  document.addEventListener('DOMContentLoaded', function() {
    initializeSearch();
    
    const searchInput = document.getElementById('search-input') as HTMLInputElement;
    const searchResults = document.getElementById('search-results');
    
    if (searchInput) {
      searchInput.addEventListener('input', function() {
        const query = this.value.trim();
        
        // 清除之前的搜索超时
        if (searchTimeout) {
          clearTimeout(searchTimeout);
        }
        
        // 设置新的搜索超时
        searchTimeout = setTimeout(() => {
          if (query.length >= 2) {
            performSearch(query);
          } else {
            hideSearchResults();
          }
        }, 300);
      });
      
      // 失去焦点时隐藏搜索结果
      searchInput.addEventListener('blur', function() {
        setTimeout(() => {
          hideSearchResults();
        }, 200);
      });
      
      // 获得焦点时如果有内容则显示搜索结果
      searchInput.addEventListener('focus', function() {
        if (this.value.trim().length >= 2) {
          const resultsDiv = document.getElementById('search-results');
          if (resultsDiv && resultsDiv.querySelector('#search-content')?.innerHTML) {
            resultsDiv.classList.remove('hidden');
          }
        }
      });
    }
    
    // 点击页面其他地方时隐藏搜索结果
    document.addEventListener('click', function(event) {
      const searchContainer = document.querySelector('.search-container');
      if (searchContainer && !searchContainer.contains(event.target as Node)) {
        hideSearchResults();
      }
    });
    
    // 键盘导航支持
    searchInput?.addEventListener('keydown', function(event) {
      const results = document.querySelectorAll('.search-result-item');
      if (results.length === 0) return;
      
      if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {
        event.preventDefault();
        // 这里可以添加键盘导航逻辑
      } else if (event.key === 'Enter') {
        const firstResult = results[0] as HTMLElement;
        if (firstResult) {
          firstResult.click();
        }
      } else if (event.key === 'Escape') {
        hideSearchResults();
        this.blur();
      }
    });
  });
  
  // 备用搜索功能（当 Pagefind 不可用时）
  let fallbackSearchData: any[] = [];
  
  async function initializeFallbackSearch() {
    try {
      // 这里可以获取静态的搜索索引数据
      // 或者实现简单的客户端搜索
      console.log('Initializing fallback search...');
    } catch (error) {
      console.error('Failed to initialize fallback search:', error);
    }
  }
  
  function performFallbackSearch(query: string) {
    // 简单的备用搜索逻辑
    showEmptyState();
  }
</script>